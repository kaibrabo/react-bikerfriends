{"version":3,"sources":["serviceWorker.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","containers/App.js","index.js"],"names":["Boolean","window","location","hostname","match","Card","_ref","name","email","id","react_default","a","createElement","className","src","concat","alt","CardList","friends","map","u","i","components_Card","key","SearchBox","seachfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","height","children","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onSearchChange","event","setState","searchfield","target","value","state","_this2","fetch","then","res","json","users","_this$state","filteredFriends","filter","friend","toLowerCase","includes","length","components_SearchBox","components_Scroll","components_CardList","Component","ReactDOM","render","containers_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"oLAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,wGCDSC,EAdF,SAAAC,GAAyB,IAAtBC,EAAsBD,EAAtBC,KAAMC,EAAgBF,EAAhBE,MAAOC,EAASH,EAATG,GACzB,OAEIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mDAEXH,EAAAC,EAAAC,cAAA,OAAKE,IAAG,wBAAAC,OAA0BN,EAA1B,YAAwCO,IAAG,GAAAD,OAAKR,KACxDG,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,UAAKL,GACLG,EAAAC,EAAAC,cAAA,SAAIJ,MCWLS,EAlBE,SAAAX,GAAiB,IAAdY,EAAcZ,EAAdY,QAChB,OACIR,EAAAC,EAAAC,cAAA,WACKM,EAAQC,IAAI,SAACC,EAAGC,GAEb,OACIX,EAAAC,EAAAC,cAACU,EAAD,CACIC,IAAKF,EACLZ,GAAIS,EAAQG,GAAGZ,GACfF,KAAMW,EAAQG,GAAGd,KACjBC,MAAOU,EAAQG,GAAGb,YCE3BgB,EAbG,SAAAlB,GAAkCA,EAA/BmB,WAA+B,IAAnBC,EAAmBpB,EAAnBoB,aAC7B,OACIhB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACXH,EAAAC,EAAAC,cAAA,SACIC,UAAU,iBACVc,KAAK,SACLC,YAAY,iBACZC,SAAUH,MCAXI,EARA,SAACC,GACZ,OACIrB,EAAAC,EAAAC,cAAA,OAAKoB,MAAO,CAACC,UAAW,SAAUC,OAAQ,UACpCH,EAAMI,WCmDLC,qBAjDX,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACVC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QAcJI,eAAiB,SAAAC,GAEbR,EAAKS,SAAS,CAAEC,YAAaF,EAAMG,OAAOC,SAf1CZ,EAAKa,MAAQ,CACThC,QAAS,GACT6B,YAAa,IAJPV,mFAQM,IAAAc,EAAAX,KAEhBY,MAAM,8CACDC,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAChBF,KAAK,SAAAG,GAAK,OAAIL,EAAKL,SAAS,CAAE5B,QAASsC,uCAQvC,IAAAC,EAE4BjB,KAAKU,MAA9BhC,EAFHuC,EAEGvC,QAAS6B,EAFZU,EAEYV,YAEXW,EAAkBxC,EAAQyC,OAAO,SAAAC,GACnC,OAAOA,EAAOrD,KACTsD,cACAC,SAASf,EAAYc,iBAI9B,OAAQ3C,EAAQ6C,OAOZrD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,MACXH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,gBAAd,iBACAH,EAAAC,EAAAC,cAACoD,EAAD,CAAWtC,aAAcc,KAAKI,iBAC9BlC,EAAAC,EAAAC,cAACqD,EAAD,KACIvD,EAAAC,EAAAC,cAACsD,EAAD,CAAUhD,QAASwC,MAR/BhD,EAAAC,EAAAC,cAAA,MAAIC,UAAU,mBAAd,qBAnCUsD,cCClBC,IAASC,OACH3D,EAAAC,EAAAC,cAAC0D,EAAD,MACJC,SAASC,eAAe,SNoHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMtB,KAAK,SAAAuB,GACjCA,EAAaC","file":"static/js/main.22826ec3.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\n\n// each card view\nconst Card = ({ name, email, id }) => {\n    return (\n        // class=\"tachyons\"\n        <div className=\"bg-light-blue dib br3 pa3 ma2 grow bw2 shadow-5\">\n            {/* Robohash displays images, 'id' makes images consistent to each object */}\n            <img src={`https://robohash.org/${id}?200x200`} alt={`${name}`} />\n            <div>\n                <h2>{name}</h2>\n                <p>{email}</p>\n            </div>\n        </div>\n    );\n};\n\nexport default Card;\n","import React from \"react\";\nimport Card from \"./Card\";\n\n// cards collection view\nconst CardList = ({ friends }) => {\n    return (\n        <div>\n            {friends.map((u, i) => {\n                // 'u' is the array (required), 'i' is the index\n                return (\n                    <Card\n                        key={i} // key attribute required - for loops (map)\n                        id={friends[i].id}\n                        name={friends[i].name}\n                        email={friends[i].email}\n                    />\n                );\n            })}\n        </div>\n    );\n};\n\nexport default CardList;\n","import React from \"react\";\n\n// search input view\nconst SearchBox = ({ seachfield, searchChange }) => {\n    return (\n        <div className=\"pa2\">\n            <input\n                className=\"pa3 ba b--blue\"\n                type=\"search\"\n                placeholder=\"Search Friends\"\n                onChange={searchChange}\n            />\n        </div>\n    );\n};\n\nexport default SearchBox;\n","import React from 'react';\n\nconst Scroll = (props) => {\n    return (\n        <div style={{overflowY: 'scroll', height: '800px'}}>\n            { props.children }\n        </div>\n    );\n};\n\nexport default Scroll;","import React, { Component } from \"react\";\nimport CardList from \"../components/CardList\";\nimport SearchBox from \"../components/SearchBox\";\nimport Scroll from '../components/Scroll';\nimport './app.css';\n\nclass App extends Component {\n    constructor() {\n        super(); // required for state\n        this.state = {\n            friends: [],\n            searchfield: \"\"\n        };\n    }\n\n    componentDidMount() {\n        // fetch users data, then creates users; fetch is a method on the window obj.\n        fetch(\"https://jsonplaceholder.typicode.com/users\")\n            .then(res => res.json()) // converts response to json\n            .then(users => this.setState({ friends: users }));\n    }\n\n    onSearchChange = event => {\n        // trigger & collects text input\n        this.setState({ searchfield: event.target.value });\n    };\n\n    render() {\n        // destructure this.state obj.\n        const { friends, searchfield } = this.state;\n        // filter friends result while typing\n        const filteredFriends = friends.filter(friend => {\n            return friend.name\n                .toLowerCase()\n                .includes(searchfield.toLowerCase());\n        });\n\n        // ternary\n        return !friends.length ?\n\n        // render loading view\n        <h1 className='tc header-title'>LOADING...</h1> :\n        \n        // render app view\n        (\n            <div className=\"tc\">\n                <h1 className=\"header-title\">Biker Friends</h1>\n                <SearchBox searchChange={this.onSearchChange} />\n                <Scroll>\n                    <CardList friends={filteredFriends} />\n                </Scroll>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nimport App from './containers/App';\n\nReactDOM.render(\n      <App />\n, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}