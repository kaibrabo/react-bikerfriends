{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","containers/App.js","actions.js","constants.js","reducers.js","serviceWorker.js","index.js"],"names":["Card","_ref","name","email","id","react_default","a","createElement","className","src","concat","alt","CardList","friends","map","u","i","components_Card","key","SearchBox","seachfield","searchChange","type","placeholder","onChange","Scroll","props","children","ErrorBoundary","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","hasError","error","info","setState","Component","App","onRequestFriends","_this$props","searchField","onSearchChange","isPending","filteredFriends","filter","friend","toLowerCase","includes","components_SearchBox","components_Scroll","components_ErrorBoundary","components_CardList","connect","searchFriends","requestFriends","dispatch","event","payload","target","value","fetch","then","res","json","data","catch","initialStateSearch","initialStateFriends","Boolean","window","location","hostname","match","rootReducer","combineReducers","arguments","length","undefined","action","assign","store","createStore","applyMiddleware","thunkMiddleware","logger","ReactDOM","render","es","containers_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a9a089ea.chunk.js","sourcesContent":["import React from \"react\";\n\n// each card view\nconst Card = ({ name, email, id }) => {\n    return (\n        // class=\"tachyons\"\n        <div className=\"bg-light-blue dib br3 pa3 ma2 grow bw2 shadow-5\">\n            {/* Robohash displays images, 'id' makes images consistent to each object */}\n            <img src={`https://robohash.org/${id}?200x200`} alt={`${name}`} />\n            <div>\n                <h2>{name}</h2>\n                <p>{email}</p>\n            </div>\n        </div>\n    );\n};\n\nexport default Card;\n","import React from \"react\";\nimport Card from \"./Card\";\n\n// cards collection view\nconst CardList = ({ friends }) => {\n    return (\n        <div>\n            {friends.map((u, i) => {\n                // 'u' is the array (required), 'i' is the index\n                return (\n                    <Card\n                        key={i} // key attribute required - for loops (map)\n                        id={friends[i].id}\n                        name={friends[i].name}\n                        email={friends[i].email}\n                    />\n                );\n            })}\n        </div>\n    );\n};\n\nexport default CardList;\n","import React from \"react\";\n\n// search input view\nconst SearchBox = ({ seachfield, searchChange }) => {\n    return (\n        <div className=\"pa2\">\n            <input\n                className=\"pa3 ba b--blue\"\n                type=\"search\"\n                placeholder=\"Search Friends\"\n                onChange={searchChange}\n            />\n        </div>\n    );\n};\n\nexport default SearchBox;\n","import React from 'react';\nimport './scroll.css';\n\nconst Scroll = (props) => {\n    return (\n        <div className=\"scroll-container\">\n            <div className=\"scroll-item\">\n                { props.children }\n            </div>\n        </div>\n    );\n};\n\nexport default Scroll;","import React, { Component } from 'react';\n\nclass ErrorBoundary extends Component {\n    // catches errors in components\n    constructor(props) {\n        super(props);\n        this.state = {\n            hasError: false\n        }\n    }\n\n    componentDidCatch(error, info) {\n        this.setState({ hasError: true });\n    }\n\n    render() {\n        if (this.state.hasError) {\n            return <h2>Ooops, something went wrong..</h2>\n        }\n\n        return this.props.children;\n    }\n}\n\nexport default ErrorBoundary;","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport CardList from \"../components/CardList\";\nimport SearchBox from \"../components/SearchBox\";\nimport Scroll from \"../components/Scroll\";\nimport ErrorBoundary from \"../components/ErrorBoundary\";\nimport { setSearchField, requestFriends } from \"../actions\";\nimport \"./app.css\";\n\nconst mapStateToProps = state => {\n    return {\n        searchField: state.searchFriends.searchField,\n        friends: state.requestFriends.friends,\n        isPending: state.requestFriends.isPending,\n        error: state.requestFriends.error\n    };\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onSearchChange: event => dispatch(setSearchField(event.target.value)),\n        onRequestFriends: () => dispatch(requestFriends())\n    };\n};\n\nclass App extends Component {\n    componentDidMount() {\n        this.props.onRequestFriends();\n    }\n\n    render() {\n        const { searchField, onSearchChange, friends, isPending } = this.props;\n        // filter friends result while typing\n        const filteredFriends = friends.filter(friend => {\n            return friend.name\n                .toLowerCase()\n                .includes(searchField.toLowerCase());\n        });\n\n        // ternary\n        return isPending ? (\n            // render loading view\n            <h1 className=\"tc header-title\">LOADING...</h1>\n        ) : (\n            // render app view\n            <div className=\"tc\">\n                <h1 className=\"header-title\">Biker Friends</h1>\n\n                <SearchBox searchChange={onSearchChange} />\n\n                <Scroll>\n                    <ErrorBoundary>\n                        <CardList friends={filteredFriends} />\n                    </ErrorBoundary>\n                </Scroll>\n            </div>\n        );\n    }\n}\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(App);\n","import {\n    CHANGE_SEARCH_FIELD,\n    REQUEST_FRIENDS_PENDING,\n    REQUEST_FRIENDS_SUCCESS,\n    REQUEST_FRIENDS_FAILED\n} from \"./constants\";\n\n// ES6 - {return {}} == ({})\nexport const setSearchField = text => ({\n    type: CHANGE_SEARCH_FIELD,\n    payload: text\n});\n\nexport const requestFriends = () => dispatch => {\n    dispatch({ type: REQUEST_FRIENDS_PENDING });\n\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n        .then(res => res.json())\n        .then(data => dispatch({ \n            type: REQUEST_FRIENDS_SUCCESS,\n            payload: data\n        }))\n        .catch(error => dispatch({ \n            type: REQUEST_FRIENDS_FAILED,\n            payload: error\n        }));\n};\n","export const CHANGE_SEARCH_FIELD = \"CHANGE_SEARCH_FIELD\";\n\nexport const REQUEST_FRIENDS_PENDING = \"REQUEST_FRIENDS_PENDING\";\nexport const REQUEST_FRIENDS_SUCCESS = \"REQUEST_FRIENDS_SUCCESS\";\nexport const REQUEST_FRIENDS_FAILED = \"REQUEST_FRIENDS_FAILED\";\n","import {\n    CHANGE_SEARCH_FIELD,\n    REQUEST_FRIENDS_PENDING,\n    REQUEST_FRIENDS_SUCCESS,\n    REQUEST_FRIENDS_FAILED\n} from \"./constants\";\n\nconst initialStateSearch = {\n    searchField: \"\"\n};\n\nconst initialStateFriends = {\n    friends: [],\n    isPending: false,\n    error: ''\n}\n\nexport const searchFriends = (state = initialStateSearch, action = {}) => {\n    switch (action.type) {\n        case CHANGE_SEARCH_FIELD:\n            return Object.assign({}, state, { searchField: action.payload });\n        default:\n            return state;\n    }\n};\n\nexport const requestFriends = (state = initialStateFriends, action = {}) => {\n    switch (action.type) {\n        case REQUEST_FRIENDS_PENDING:\n            return Object.assign({}, state, { isPending: true });\n        case REQUEST_FRIENDS_SUCCESS:\n            return Object.assign({}, state, {\n                friends: action.payload,\n                isPending: false\n            });\n        case REQUEST_FRIENDS_FAILED:\n            return Object.assign({}, state, {\n                error: action.payload,\n                isPending: false\n            });\n        default:\n            return state;\n    }\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./containers/App\";\nimport thunkMiddleware from \"redux-thunk\";\nimport { Provider } from \"react-redux\";\nimport { createStore, applyMiddleware, combineReducers } from \"redux\";\nimport { logger } from \"redux-logger\";\nimport { searchFriends, requestFriends } from \"./reducers\";\nimport \"./index.css\";\nimport \"tachyons\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nconst rootReducer = combineReducers({ searchFriends, requestFriends });\n\nconst store = createStore(\n    rootReducer,\n    applyMiddleware(thunkMiddleware, logger)\n);\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}